{"version":3,"sources":["src/views/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;ACAA,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC;AAErD,ADFA,IAAA,QAAA,GAAA,aAAA,YAAA;ACGA,EDFE,SAAA,QAAA,CAAmB,MAAe,EAAA;ACGpC,IDHqB,IAAA,CAAA,MAAM,GAAN,MAAM;ACK3B,EDLuC;EAErC,QAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO;MACL,cAAc,EAAE,IAAI,CAAC,aAAa;MAClC,eAAe,EAAE,IAAI,CAAC;KACvB;EACH,CAAC;EAED,QAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;EAChC,CAAC;EAED,QAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;EAC1B,CAAC;ACGH,EDDE,QAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,OAAO,sHAMN;EACH,CAAC;EAED,QAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,QAA0B,EAAA;IACnC,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE;mCAEzB,QAAQ,EAAA;MACT,IAAA,EAAA,GAAwB,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;QAA1C,SAAS,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAuB;MAEjD,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO,EAAA;QACjD,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;MAC1D,CAAC,CAAC;;IALJ,KAAK,IAAI,QAAQ,IAAI,SAAS,EAAA;cAArB,QAAQ,CAAA;;EAOnB,CAAC;EAED,QAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,IAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC;IAC1D,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,EAAE;IAE3C,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC;ACH5C,IDKI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC;ACJ/C,EDKE,CAAC;ACJH,EDKA,OAAA,QAAC;ACJD,ADIA,CAhDA,EAAA;AC8CA,AD9Ca,OAAA,CAAA,QAAA,GAAA,QAAA;;;;;;;;;;;;;;AC4Db;;;AAIA;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;AAOA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;AAOA;;;;;;;;;AAUA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA,IAAM,QAAQ,GAAI,IAAI,UAAA,CAAA,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AAE/D,QAAQ,CAAC,MAAM,EAAE","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export class UserForm {\n  constructor(public parent: Element) {}\n\n  eventsMap(): { [key: string]: () => void }{\n    return {\n      'click:button': this.onButtonClick,\n      'mouseenter:h1': this.onHeaderHover,\n    }\n  }\n\n  onHeaderHover(): void {\n    console.log('H1 was hovered.')\n  }\n  \n  onButtonClick(): void {\n    console.log('Hi There!')\n  }\n\n  template(): string {\n    return `\n      <div>\n        <h1>User Form</h1>\n        <input />\n        <button>Click me!</button>\n      </div>\n    `\n  }\n\n  bindEvents(fragment: DocumentFragment): void {\n    const eventsMap = this.eventsMap();\n\n    for (let eventKey in eventsMap) {\n      const [eventName, selector] = eventKey.split(':')\n\n      fragment.querySelectorAll(selector).forEach(element => {\n        element.addEventListener(eventName, eventsMap[eventKey])\n      })\n    }\n  }\n\n  render(): void {\n    const templateElement = document.createElement('template')\n    templateElement.innerHTML = this.template()\n\n    this.bindEvents(templateElement.content)\n\n    this.parent.append(templateElement.content)\n  }\n}","console.log('This is Typpie, a Typed Web Framework!')\n\n// import axios, { AxiosResponse } from 'axios';\n//import { Collection } from \"./models/Collection\"\n//import { User/*, UserProps*/ } from \"./models/User\" \n\n/* First approach:\nconst user = new User({ name: 'Fulanito', age: 35});\n\nconsole.info(`User Props: ${user.get('name')}, ${user.get('age')}`);\n\nuser.set({ name: \"Fulanito D'tal\" })\n\nconsole.info(`New User Props: ${user.get('name')}, ${user.get('age')}`);\n\nconst userEmpty = new User({});\n\nconsole.info(`New Empty User Props: ${userEmpty.get('name')}, ${userEmpty.get('age')}`);\n*/\n/*\n-----------------------------------------------------------------\nDoesn't work this way after separating the events to a diff class.\nNow requires user.events.on / .trigger check line: 70.\n-----------------------------------------------------------------\nuser.on('change', () => {\n  console.log('change 0');\n});\nuser.on('change', () => {\n  console.log('change 1');\n});\nuser.on('otherEvent', () => {\n  console.log('otherEvent 0');\n});\n\nuser.trigger('change');\n\nconsole.log(user);\n\nuser.trigger('otherEvent');\n*/\n\n// Install > npm install -g json-server\n// Create and fill file: db.json\n// > json-server -w db.json\n// > npm install axios\n\n/* Examples after installing json-server.\naxios.post('http://localhost:3000/users', {\n  name: 'Nolito',\n  age: 50\n});\n\nconst jsonUser = new User({ id: 19 });\n \njsonUser.fetch();\n\nsetTimeout(() => {\n  console.log(jsonUser);\n}, 1000);\n*/\n/*let marito = {};\naxios.get('http://localhost:3000/users/1').then(user => marito=user);\nconsole.log(marito);*/\n\n/* Before Async and Attributes refactoring:\nconst oldUser = new User({ id: 1 });\noldUser.set({ name: 'Otro won', age: 40 })\noldUser.save();\n\nconst newUser = new User({});\nnewUser.set({ name: 'New won', age: 44 })\nnewUser.save();\n\nnewUser.events.on('change', () => {\n  console.log('change 0');\n});\n\nnewUser.events.on('change', () => {\n  console.log('change 1');\n});\n\nnewUser.events.trigger('change');\n*/\n\n/* FW v2\n\nconst user = new User ({ name: 'Perensejo', age: 0 })\n\nWaay 2 complex:\nuser.sync.save({ name: user.attributes.get('name'), age: user.attributes.get('age')});\n*/\n/*\nconst user = new User ({ age: 40 })\n\nuser.on('change', () => {\n  console.log(user)\n});\n\nuser.set({ name: 'Lemita' });*/\n/*\nconst user = new User ({ id: 1, name: 'New Name', age: 5 })\n\nuser.on('save', () => {\n  console.log(user)\n});\n\nuser.save();*/\n/*\nconst user = User.buildUser({ id: 3 });\n\nuser.on('change', () => {\n  console.log(user);\n});\n\nuser.fetch();\n*/\n/*\nconst url = 'http://localhost:3000/users'\n\nconst collection = new Collection<User, UserProps>(\n  url,\n  (json: UserProps) => User.(json)\n);*/\n/*\nconst collection = User.buildUserCollection();\n\ncollection.on('change', () => {\n  console.log(collection);\n});\n\ncollection.fetch();\n*/\n\nimport { UserForm } from \"./views/UserForm\"\n\nconst userForm =  new UserForm(document.getElementById('root'))\n\nuserForm.render()\n\n\n\n\n"]}