Express + Typescript Integration:

-> TS has a very distinct OOP Style.
-> Many popular JS libs were written before JS had any solid idea of 'classes'.
-> Integrating TS with popular JS libs can be tough.

TS with JS Libs, 3 options:
  1. Use the lib normally, adding in basic type annotations where possible.
  2. Use a TS adapter library that has helpers for using your lib with TS. (e.g. "ts-express-decorators").
  3. Twist your lib to work with TS classes. (Will do this: first option 1 using Express and refactor it to option 3 using all TS complexity).

Express is a middleware which does some processing of 'Request' and 'Response', then calls 'NextFunction' when complete.
Middleware is hard to deal with out of the box with TS.

Integration Issues:
  -> CONS: 1. Type definition files alone can't express what is going on in the JS world accurately (example: middleware, and the body property).
           2. Type definition files provided to us aren't always accurate. This is how TS is handled, sometimes this files are not enough. 
           3. Inputs to a server (or any program with external inputs) are not guaranteed to exist, or be of the correct type. (Exacerbarted by the type definition file)
  -> PROS: 1. Addressing these type issues with Typescript can force us to write better code.

At the end classes in TS are just inheritance prototypes in JS.

Decorators: Functions that can be used to modify/change/anything different properties/methods in the class. These are not the same as JS decorators.
            Used only inside or on classes. Experimental atm.

Solution to simplify decorators on middleware using metadata.
-> Node executes our code.
-> Class definition read in - decorators
-> Decorators associate route configuration info with the method by using metadata.
-> All method decorators run.
-> Class decorator of '@controller' runs last.
-> Class decorator reads metadata from each method, adds complete route definitions to router.

Metadata: -> Proposed feature to be added to JS (and thus, TS).
          -> Snippets of info that can be tied to a method, property, or class definition.
          -> Can be used for super custom stuff.
          -> TS will (optionally) provide type info as metadata.
          -> Read and written using th reflect-metadata package. (npm).
          

